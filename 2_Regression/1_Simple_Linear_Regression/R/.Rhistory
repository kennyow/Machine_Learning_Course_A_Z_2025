colhead = list(
fg_params = list(fontface = "bold")               # Cabeçalho em negrito
)
))
return(invisible(resultados))  # Retorna os resultados sem imprimir diretamente
}
# Função para simular poder do teste t
simular_poder_t <- function(n_amostras = 30, tamanho_amostra = 20, efeito = 0.5, alpha = 0.05) {
resultados <- data.frame(
Amostra = 1:n_amostras,
t = numeric(n_amostras),
p_valor = numeric(n_amostras),
decisao = character(n_amostras),
stringsAsFactors = FALSE
)
for (i in 1:n_amostras) {
# Gerar dados com efeito especificado
grupo1 <- rnorm(tamanho_amostra)
grupo2 <- rnorm(tamanho_amostra, mean = efeito)
# Executar teste t
teste <- t.test(grupo1, grupo2)
# Armazenar resultados
resultados$t[i] <- teste$statistic
resultados$p_valor[i] <- teste$p.value
resultados$decisao[i] <- ifelse(teste$p.value < alpha, "Rejeita H0", "Aceita H0")
}
# Calcular poder empírico
poder <- mean(resultados$decisao == "Rejeita H0")
# Plotar resultados
g <- ggplot(resultados, aes(x = Amostra, y = t, color = decisao)) +
geom_point(size = 3) +
geom_hline(yintercept = qt(c(alpha/2, 1-alpha/2), 100), linetype = "dashed") +
scale_color_manual(values = c("Aceita H0" = "blue", "Rejeita H0" = "red")) +
labs(title = paste("Simulação de Testes t (Poder =", round(poder*100, 1), "%)"),
subtitle = paste("Tamanho amostral =", tamanho_amostra, "| Efeito =", efeito),
x = "Número da Amostra",
y = "Estatística t") +
theme_minimal() +
theme(legend.position = "top")
list(grafico = g, resultados = resultados, poder = poder)
}
# Função para analisar efeito do tamanho amostral
analise_sensibilidade <- function(efeito = 0.5, tamanhos = seq(10, 100, by = 10), n_sim = 100) {
poderes <- numeric(length(tamanhos))
for (i in seq_along(tamanhos)) {
n <- tamanhos[i]
rejeicoes <- 0
for (j in 1:n_sim) {
grupo1 <- rnorm(n)
grupo2 <- rnorm(n, mean = efeito)
teste <- t.test(grupo1, grupo2)
if (teste$p.value < 0.05) rejeicoes <- rejeicoes + 1
}
poderes[i] <- rejeicoes / n_sim
}
dados <- data.frame(Tamanho = tamanhos, Poder = poderes, Efeito = efeito)
ggplot(dados, aes(x = Tamanho, y = Poder)) +
geom_line(color = "steelblue", size = 1.5) +
geom_point(size = 3) +
labs(title = "Poder do Teste t em Função do Tamanho Amostral",
subtitle = paste("Tamanho do efeito =", efeito),
y = "Poder (1 - β)") +
theme_minimal() +
scale_y_continuous(limits = c(0, 1), labels = scales::percent)
}
# Função para teste t com hipóteses dinâmicas
t_test_dinamico <- function(x, y = NULL, mu0 = 0,
h0_text = "Médias iguais",
h1_text = "Médias diferentes",
alpha = 0.05,
var_equal = FALSE) {
if (is.null(y)) {
# Teste t para uma amostra
teste <- t.test(x, mu = mu0)
diff <- mean(x) - mu0
} else {
# Teste t para duas amostras
teste <- t.test(x, y, var.equal = var_equal)
diff <- mean(x) - mean(y)
}
# Determinar decisão
decisao <- ifelse(teste$p.value < alpha,
paste("Rejeitar H0 a favor de H1:", h1_text),
paste("Não rejeitar H0:", h0_text))
list(
estatistica_t = teste$statistic,
p_valor = teste$p.value,
graus_liberdade = teste$parameter,
diferenca = diff,
intervalo_confianca = teste$conf.int,
decisao = decisao,
h0 = h0_text,
h1 = h1_text,
alpha = alpha
)
}
# Função para criar tabela dinâmica
criar_tabela_dinamica <- function(resultados) {
dados <- data.frame(
Teste = c("Comparação 2 Amostras", "Teste 1 Amostra (n=30)", "Teste 1 Amostra (n=100)"),
t = sapply(resultados, function(x) round(x$estatistica_t, 4)),
gl = sapply(resultados, function(x) round(x$graus_liberdade, 1)),
Valor_p = sapply(resultados, function(x) ifelse(x$p_valor < 0.001, "<0.001", round(x$p_valor, 4))),
Diferença = sapply(resultados, function(x) round(x$diferenca, 3)),
H0 = sapply(resultados, function(x) x$h0),
H1 = sapply(resultados, function(x) x$h1),
Decisão = sapply(resultados, function(x) x$decisao),
stringsAsFactors = FALSE
)
# Criar tema customizado para a tabela
meu_ttheme <- ttheme_default(
core = list(
fg_params = list(hjust = 0, x = 0.05),
bg_params = list(fill = c("#F7F7F7", "#FFFFFF")),
padding = unit(c(6, 6), "mm")
),
colhead = list(
fg_params = list(fontface = "bold", col = "white"),
bg_params = list(fill = "#4C72B0")
),
rowhead = list(
fg_params = list(fontface = "bold")
)
)
# Plotar tabela
grid.newpage()
grid.table(dados,
theme = meu_ttheme,
rows = NULL)
# Adicionar título
grid.text("Resultados dos Testes t de Student com Hipóteses Dinâmicas",
y = 0.95,
gp = gpar(fontsize = 14, fontface = "bold", col = "#2B5876"))
# Adicionar legenda
grid.text(paste("Nível de significância α =", resultados[[1]]$alpha),
x = 0.05, y = 0.02,
just = "left",
gp = gpar(fontsize = 10, col = "gray30"))
}
###############################################################
plot_t_gg <- function(amostra1, amostra2, alpha = 0.05) {
# Teste t
t_test <- t.test(amostra1, amostra2, var.equal = TRUE)
t_obs <- as.numeric(t_test$statistic)
df <- as.numeric(t_test$parameter)
p_valor <- t_test$p.value
t_crit <- qt(1 - alpha / 2, df)
# Curva da distribuição t
x_vals <- seq(-4, 4, length.out = 1000)
df_t <- data.frame(
x = x_vals,
densidade = dt(x_vals, df),
critica = ifelse(abs(x_vals) >= t_crit, "Crítica", "Aceitação")
)
ggplot(df_t, aes(x = x, y = densidade)) +
geom_area(aes(fill = critica), alpha = 0.5) +
geom_line(color = "black", size = 1) +
geom_vline(xintercept = c(-t_crit, t_crit), linetype = "dashed", color = "blue") +
geom_vline(xintercept = t_obs, color = "red", linetype = "dashed", size = 1) +
annotate("text", x = t_obs, y = 0.05, label = paste0("t = ", round(t_obs, 3)),
color = "red", hjust = -0.1) +
annotate("text", x = 0, y = 0.35,
label = paste0("p-valor = ", round(p_valor, 4),
"\ndf = ", round(df, 2),
"\nα = ", alpha),
size = 4, hjust = 0.5) +
scale_fill_manual(values = c("Crítica" = "skyblue", "Aceitação" = "white")) +
labs(title = "Distribuição t de Student",
subtitle = "Teste t para duas amostras independentes",
x = "Estatística t",
y = "Densidade de probabilidade") +
theme_minimal(base_size = 14)
}
##########################################################################
# Função para fazer todos os testes t 2 a 2 com gráficos
comparacoes_t <- function(..., alpha = 0.05, paired = FALSE) {
grupos <- list(...)
nomes <- paste0("Grupo", seq_along(grupos))
combinacoes <- combn(length(grupos), 2, simplify = FALSE)
plots <- list()
for (i in seq_along(combinacoes)) {
idx <- combinacoes[[i]]
g1 <- grupos[[idx[1]]]
g2 <- grupos[[idx[2]]]
nome1 <- nomes[idx[1]]
nome2 <- nomes[idx[2]]
# Teste t
teste <- t.test(g1, g2, paired = paired)
t_obs <- teste$statistic
p_valor <- teste$p.value
gl <- teste$parameter
# Valor crítico (t bilateral)
t_critico <- qt(1 - alpha/2, df = gl)
# Distribuição t
x <- seq(-max(4, abs(t_obs) + 1), max(4, abs(t_obs) + 1), length.out = 500)
y <- dt(x, df = gl)
df_t <- data.frame(x = x, y = y)
g <- ggplot(df_t, aes(x, y)) +
geom_line(size = 1.1) +
geom_area(data = subset(df_t, abs(x) >= t_critico), aes(x, y), fill = "red", alpha = 0.4) +
geom_vline(xintercept = t_obs, color = "blue", linetype = "dashed", size = 1) +
annotate("text", x = t_obs, y = max(y)*0.9,
label = paste0("t obs = ", round(t_obs, 3)), angle = 90,
hjust = -0.2, color = "blue") +
labs(
title = paste("Teste t:", nome1, "vs", nome2),
subtitle = paste("p-valor =", signif(p_valor, 3),
ifelse(p_valor < alpha, "→ rejeita H0", "→ não rejeita H0")),
x = "Estatística t",
y = "Densidade"
) +
theme_minimal(base_size = 13)
plots[[i]] <- g
}
# Mostrar todos os gráficos (ajustável)
grid.arrange(grobs = plots, ncol = 2)
}
###############################################
# Funções atualizadas (já incluem plots)
t_student1 <- function(amostra1, amostra2) {
std1 <- sd(amostra1)
mean1 <- mean(amostra1)
size1 <- length(amostra1)
std2 <- sd(amostra2)
mean2 <- mean(amostra2)
size2 <- length(amostra2)
t <- abs((mean1 - mean2) / sqrt((std1^2 / size1) + (std2^2 / size2)))
# Plotar histogramas
plot1 <- ggplot(data.frame(x = amostra1), aes(x)) +
geom_histogram(bins = 15, fill = "blue", alpha = 0.7) +
labs(title = "Amostra 1", x = "", y = "")
plot2 <- ggplot(data.frame(x = amostra2), aes(x)) +
geom_histogram(bins = 15, fill = "red", alpha = 0.7) +
labs(title = "Amostra 2", x = "", y = "")
grid.arrange(plot1, plot2, ncol = 2)
return(t)
}
t_student2 <- function(amostra, mean_pop) {
size <- length(amostra)
mean_amos <- mean(amostra)
std_amos <- sd(amostra)
tc <- abs((mean_amos - mean_pop) / (std_amos / sqrt(size)))
# Plotar histograma
plot <- ggplot(data.frame(x = amostra), aes(x)) +
geom_histogram(bins = 15, fill = "purple", alpha = 0.7) +
geom_vline(xintercept = mean_pop, color = "red", linetype = "dashed", linewidth = 1) +
labs(title = paste("Amostra vs Média Pop. =", mean_pop), x = "", y = "")
print(plot)
return(tc)
}
##################################################################
#Z-Score
##################################################################
# Função Z-score Manual
zscore_manual <- function(x, mu0, alpha = 0.05, sigma = NULL) {
n <- length(x)
media_amostral <- mean(x)
# Se sigma não for fornecido, usar desvio padrão amostral (para n grande)
if (is.null(sigma)) {
warning("Usando desvio padrão amostral - válido para n > 30")
sigma <- sd(x)
}
erro_padrao <- sigma / sqrt(n)
z <- (media_amostral - mu0) / erro_padrao
z_critico <- qnorm(1 - alpha/2)
p_valor <- 2 * pnorm(-abs(z))
decisao <- ifelse(abs(z) > z_critico,
paste("Rejeitar H0: Média igual a", mu0),
paste("Aceitar H0: Média igual a", mu0))
list(
estatistica_z = z,
valor_p = p_valor,
z_critico = z_critico,
media_amostral = media_amostral,
mu0 = mu0,
n = n,
sigma = sigma,
intervalo_confianca = c(media_amostral - z_critico * erro_padrao,
media_amostral + z_critico * erro_padrao),
decisao = decisao
)
}
# Função Z-score Padrão (utilizando a biblioteca do R)
zscore_padrao <- function(x, mu0, alpha = 0.05, sigma = NULL) {
n <- length(x)
media_amostral <- mean(x)
# Se sigma não for fornecido, usar desvio padrão amostral (para n grande)
if (is.null(sigma)) {
warning("Usando desvio padrão amostral - válido para n > 30")
sigma <- sd(x)
}
# Calcular estatística Z padrão
erro_padrao <- sigma / sqrt(n)
z <- (media_amostral - mu0) / erro_padrao
# Valor crítico bilateral
z_critico <- qnorm(1 - alpha/2)
# Valor-p
p_valor <- 2 * pnorm(-abs(z))
# Decisão
decisao <- ifelse(abs(z) > z_critico,
paste("Rejeitar H0: Média igual a", mu0),
paste("Aceitar H0: Média igual a", mu0))
list(
estatistica_z = z,
valor_p = p_valor,
z_critico = z_critico,
media_amostral = media_amostral,
mu0 = mu0,
n = n,
sigma = sigma,
intervalo_confianca = c(media_amostral - z_critico * erro_padrao,
media_amostral + z_critico * erro_padrao),
decisao = decisao
)
}
# Função para Comparação de Z-score Manual vs. Padrão
comparar_zscores <- function(x, mu0, alpha = 0.05, sigma = NULL) {
# Calcula os Z-scores usando as funções manual e padrão
resultado_manual <- zscore_manual(x, mu0, alpha, sigma)
resultado_padrao <- zscore_padrao(x, mu0, alpha, sigma)
# Exibe resultados em um gráfico
resultados_comparados <- data.frame(
"Método" = c("Manual", "Padrão"),
"Z-Score" = c(resultado_manual$estatistica_z, resultado_padrao$estatistica_z),
"Valor-p" = c(resultado_manual$valor_p, resultado_padrao$valor_p),
"Decisão" = c(resultado_manual$decisao, resultado_padrao$decisao)
)
print(resultados_comparados)
# Plotando Z-scores
library(ggplot2)
ggplot(resultados_comparados, aes(x = Método, y = Z-Score, fill = Método)) +
geom_bar(stat = "identity", show.legend = FALSE, width = 0.5) +
labs(title = paste("Comparação entre Z-Scores para Média", mu0),
x = "Método", y = "Z-Score") +
theme_minimal(base_size = 14) +
scale_fill_manual(values = c("Manual" = "#E74C3C", "Padrão" = "#2ECC71")) +
theme(
panel.grid.major = element_line(color = "gray85", size = 0.3),
panel.grid.minor = element_line(color = "gray90", size = 0.2),
plot.background = element_rect(fill = "#FDEDEC", color = NA),
plot.title = element_text(face = "bold", hjust = 0.5, size = 16),
plot.subtitle = element_text(hjust = 0.5, color = "gray40")
)
return(invisible(resultados_comparados))
}
# Gerar dados de diferentes distribuições
set.seed(123)
dados <- list(
normal1 = rnorm(50, mean = 30, sd = 5),
normal2 = rnorm(100, mean = 30, sd = 5),
poisson = rpois(100, lambda = 30),
exponencial = rexp(100, rate = 1/30)
)
# Comparar Z-scores para as diferentes distribuições
# Aqui, fazemos a comparação para cada conjunto de dados
for (nome_dados in names(dados)) {
cat("\nComparação para a distribuição:", nome_dados, "\n")
comparar_zscores(dados[[nome_dados]], mu0 = 30)
}
# Função para Comparação de Z-score Manual vs. Padrão
comparar_zscores <- function(x, mu0, alpha = 0.05, sigma = NULL) {
# Calcula os Z-scores usando as funções manual e padrão
resultado_manual <- zscore_manual(x, mu0, alpha, sigma)
resultado_padrao <- zscore_padrao(x, mu0, alpha, sigma)
# Exibe resultados em um gráfico
resultados_comparados <- data.frame(
"Método" = c("Manual", "Padrão"),
"Z-Score" = c(resultado_manual$estatistica_z, resultado_padrao$estatistica_z),
"Valor-p" = c(resultado_manual$valor_p, resultado_padrao$valor_p),
"Decisão" = c(resultado_manual$decisao, resultado_padrao$decisao)
)
print(resultados_comparados)
# Plotando Z-scores
library(ggplot2)
ggplot(resultados_comparados, aes(x = Método, y = Z-Score, color = Método)) +
geom_bar(stat = "identity", fill = c("#E74C3C", "#2ECC71"), color = "black", width = 0.5) +
labs(title = "Comparação entre Z-Scores (Manual vs. Padrão)",
x = "Método",
y = "Z-Score",
subtitle = paste("Média testada (H0):", mu0)) +
theme_minimal(base_size = 14) +
theme(
panel.grid.major = element_line(color = "gray85", size = 0.3),
panel.grid.minor = element_line(color = "gray90", size = 0.2),
plot.background = element_rect(fill = "#FDEDEC", color = NA),
plot.title = element_text(face = "bold", hjust = 0.5, size = 16),
plot.subtitle = element_text(hjust = 0.5, color = "gray40")
)
return(invisible(resultados_comparados))
}
##################################################################
#Bartlett
##################################################################
bartlett_manual <- function(...) {
grupos <- list(...)
k <- length(grupos)
ni <- sapply(grupos, length)
N <- sum(ni)
# Variâncias amostrais
s2_i <- sapply(grupos, var)
# Variância ponderada (pooled)
s2_pooled <- sum((ni - 1) * s2_i) / (N - k)
# Estatística de Bartlett
numerador <- (N - k) * log(s2_pooled) - sum((ni - 1) * log(s2_i))
denominador <- 1 + (1 / (3 * (k - 1))) * (sum(1 / (ni - 1)) - 1 / (N - k))
B <- numerador / denominador
# Valor-p (qui-quadrado com k-1 graus de liberdade)
p_valor <- pchisq(B, df = k - 1, lower.tail = FALSE)
# Decisão
decisao <- ifelse(p_valor < 0.05, "Rejeitar H0 (variâncias diferentes)", "Aceitar H0 (variâncias iguais)")
list(
estatistica_B = B,
p_valor = p_valor,
graus_liberdade = k - 1,
decisao = decisao
)
}
bartlett_padrao <- function(...) {
teste <- bartlett.test(...)
list(
estatistica_B = teste$statistic,
p_valor = teste$p.value,
graus_liberdade = teste$parameter,
decisao = ifelse(teste$p.value < 0.05,
"Rejeitar H0 (variâncias diferentes)",
"Aceitar H0 (variâncias iguals)")
)
}
View(bartlett_padrao)
View(bartlett_manual)
View(ks_manual)
View(ks_padrao)
View(shapiro_francia_manual)
View(shapiro_padrao)
View(shapiro_francia_padrao)
setwd("~/Curso_Machine_Learning_A_Z/my_course/1_Data_Preprocessing_r")
#Importing the dataset
dataset = read.csv('Data.csv')
View(dataset)
View(dataset)
#Taking care of missing data
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN=function(x)mean(x,na.rm=TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN=function(x) mean(x, na.rm=TRUE)),
dataset$Age)
#Encoding Categorical data
dataset$Country = factor(dataset$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
dataset$Purchased = factor(dataset$Purchased,
levels= c('Yes', 'No'),
labels = c(1, 0))
#Splitting the dataset into the Training set and Test set
install.packages('caTools')
#install.packages('caTools')
library(caTools)
set.seed(123) #python is for test set, here is for training set
split = sample.split(dataset$Purchased, SpitRatio = 0.8)
split
library(caTools)
set.seed(123) #python is for test set, here is for training set
split = sample.split(dataset$Purchased, SpitRatio = 0.8)
set.seed(123) #python is for test set, here is for training set
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
split
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(test_set)
View(training_set)
training_set = scale(training_set)
training_set[, 2:3] = scale(training_set[, 2:3]) #all lines and columns 2 and 3
test_set[, 2:3] = scale(test_set[, 2:3])
setwd("~/Curso_Machine_Learning_A_Z/my_course/2_Regression/1_Simple_Linear_Regression/R")
dataset = read.csv('Salary_Data.csv')
View(dataset)
View(dataset)
#Splitting the dataset into the Training set and Test set
#install.packages('caTools')
library(caTools)
set.seed(123) #python is for test set, here is for training set
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(training_set)
View(test_set)
regressor = lm(formula = Salary ~ YearsExperience,
data = training_set)
#Predicting the Test set results
y_pred = predict(regressor, newdata = test_set)
#Visualizing the Training set results
library(ggplot2)
#Visualizing the Training set results
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata=training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Training Set)')+
xlab('Years of experience') +
ylab('Salary')
#Visualizing the Test set results
ggplot()+
geom_point(aes(x = test_set$YearsExperience, y = test_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor , newdata = training_set)),
color = 'blue') +
ggtitle('Salary vs Experience (Test Set)')+
xlab('Years of experience') +
ylab('Salary')
